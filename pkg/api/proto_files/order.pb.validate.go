// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto_files/order.proto

package proto_files

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Order) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OrderMultiError, or nil if none found.
func (m *Order) ValidateAll() error {
	return m.validate(true)
}

func (m *Order) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProductId

	// no validation rules for Count

	// no validation rules for Status

	if len(errors) > 0 {
		return OrderMultiError(errors)
	}

	return nil
}

// OrderMultiError is an error wrapping multiple validation errors returned by
// Order.ValidateAll() if the designated constraints aren't met.
type OrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderMultiError) AllErrors() []error { return m }

// OrderValidationError is the validation error returned by Order.Validate if
// the designated constraints aren't met.
type OrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderValidationError) ErrorName() string { return "OrderValidationError" }

// Error satisfies the builtin error interface
func (e OrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderValidationError{}

// Validate checks the field values on NewOrder with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NewOrder) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NewOrder with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NewOrderMultiError, or nil
// if none found.
func (m *NewOrder) ValidateAll() error {
	return m.validate(true)
}

func (m *NewOrder) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductId

	// no validation rules for Count

	// no validation rules for Status

	if len(errors) > 0 {
		return NewOrderMultiError(errors)
	}

	return nil
}

// NewOrderMultiError is an error wrapping multiple validation errors returned
// by NewOrder.ValidateAll() if the designated constraints aren't met.
type NewOrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NewOrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NewOrderMultiError) AllErrors() []error { return m }

// NewOrderValidationError is the validation error returned by
// NewOrder.Validate if the designated constraints aren't met.
type NewOrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NewOrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NewOrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NewOrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NewOrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NewOrderValidationError) ErrorName() string { return "NewOrderValidationError" }

// Error satisfies the builtin error interface
func (e NewOrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNewOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NewOrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NewOrderValidationError{}

// Validate checks the field values on OrderId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderId with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OrderIdMultiError, or nil if none found.
func (m *OrderId) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return OrderIdMultiError(errors)
	}

	return nil
}

// OrderIdMultiError is an error wrapping multiple validation errors returned
// by OrderId.ValidateAll() if the designated constraints aren't met.
type OrderIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderIdMultiError) AllErrors() []error { return m }

// OrderIdValidationError is the validation error returned by OrderId.Validate
// if the designated constraints aren't met.
type OrderIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderIdValidationError) ErrorName() string { return "OrderIdValidationError" }

// Error satisfies the builtin error interface
func (e OrderIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderIdValidationError{}

// Validate checks the field values on OrderSearchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderSearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderSearchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderSearchRequestMultiError, or nil if none found.
func (m *OrderSearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderSearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductId

	// no validation rules for Status

	if len(errors) > 0 {
		return OrderSearchRequestMultiError(errors)
	}

	return nil
}

// OrderSearchRequestMultiError is an error wrapping multiple validation errors
// returned by OrderSearchRequest.ValidateAll() if the designated constraints
// aren't met.
type OrderSearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderSearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderSearchRequestMultiError) AllErrors() []error { return m }

// OrderSearchRequestValidationError is the validation error returned by
// OrderSearchRequest.Validate if the designated constraints aren't met.
type OrderSearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderSearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderSearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderSearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderSearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderSearchRequestValidationError) ErrorName() string {
	return "OrderSearchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OrderSearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderSearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderSearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderSearchRequestValidationError{}

// Validate checks the field values on OrderListResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrderListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderListResponseMultiError, or nil if none found.
func (m *OrderListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrderListResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrderListResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrderListResponseValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OrderListResponseMultiError(errors)
	}

	return nil
}

// OrderListResponseMultiError is an error wrapping multiple validation errors
// returned by OrderListResponse.ValidateAll() if the designated constraints
// aren't met.
type OrderListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderListResponseMultiError) AllErrors() []error { return m }

// OrderListResponseValidationError is the validation error returned by
// OrderListResponse.Validate if the designated constraints aren't met.
type OrderListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderListResponseValidationError) ErrorName() string {
	return "OrderListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OrderListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderListResponseValidationError{}

// Validate checks the field values on OrderResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderResponseMultiError, or
// nil if none found.
func (m *OrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return OrderResponseMultiError(errors)
	}

	return nil
}

// OrderResponseMultiError is an error wrapping multiple validation errors
// returned by OrderResponse.ValidateAll() if the designated constraints
// aren't met.
type OrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderResponseMultiError) AllErrors() []error { return m }

// OrderResponseValidationError is the validation error returned by
// OrderResponse.Validate if the designated constraints aren't met.
type OrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderResponseValidationError) ErrorName() string { return "OrderResponseValidationError" }

// Error satisfies the builtin error interface
func (e OrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderResponseValidationError{}
